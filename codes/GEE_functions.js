//////////////////////////////////////////////////////
///////// @ self-defined functions ///////////
//////////////////////////////////////////////////////

//////////////////////////////////////////////////////
///////// Task 0: source dataset ///////////////
/////////////////////////////////////////////////////

//var dataset = function(date, end){
//  var startdate = ee.
//}




// --------- the function returns hourly data by study year and band names -------------//
exports.getHourly = function(year, bandName){
  // ** year: the study year 
  // ** bandName: name of the target band
  
  // get startdate and enddate 
  var startdate = ee.Date.fromYMD(year, 1, 1);
  var enddate = ee.Date.fromYMD(ee.Number(year).add(1), 1, 1);
  
  // filter by date and band
  var hourlyTemp = ee.ImageCollection("ECMWF/ERA5_LAND/HOURLY")
                .filter(ee.Filter.date(startdate, enddate))
                .select(bandName).map(function(image){
                   return image.subtract(273.15)
                                .set({'system:time_start': image.get('system:time_start')});
                })
                
  return hourlyTemp;
  
};

// ---------------------------- calculate relatvie humidity hourly --------------------//
//var startdate = ee.Date.fromYMD(2000, 1, 1);
//var enddate = ee.Date.fromYMD(2000, 1, 2);

// math operation among bands
//var dataset =  ee.ImageCollection("ECMWF/ERA5_LAND/HOURLY")
//               .filter(ee.Filter.date(startdate, enddate))
               

exports.getHiHourly = function(dataset){
  // ** dataset: image collection, contains air temperature K and rh (percentage value from 0-100)

      var dataset = dataset.map(function(image){
        
           var rhExpression = image.expression('exp(5423 * (1/Ta - 1/Td))',
                                              {
                                                'Ta': image.select('temperature_2m'),
                                                'Td': image.select('dewpoint_temperature_2m')
                                                }).rename('relative_humidity');
           
           var image = image.addBands(rhExpression);
          
       
           var hiExpression = image.expression(
                          // equation
                          '  -8.78469475556 +              \
                             1.61139411 * (t-273.15)  +      \
                             2.33854883889 * rh +     \
                             -0.14611605 * (t-273.15) * rh + \
                             -0.012308094 * pow((t-273.15),2) +  \
                             -0.0164248277778 * pow(rh, 2) + \
                             0.002211732 * pow((t-273.15),2) * rh + \
                             0.00072546 * (t-273.15)* pow(rh, 2) + \
                             -0.000003582* pow((t-273.15),2)*pow(rh, 2) \
                          ',
                            // variables
                            {
                              'rh':image.select('relative_humidity'),
                              't': image.select('temperature_2m')
                            }).rename('heat_index');
          
          var image = image.addBands(hiExpression)
          
          return image });      
  
  return dataset;
  
};

//////// -------------- wind chill factor -------------------//
exports.getWindChillHourly = function(uvDataset){
    
    var wtImages = uvDataset.map(function(image){
      
      var wsExpression = image.expression('sqrt(pow(u, 2) + pow(v, 2))', // equation
                                        
                                        {// variable
                                          'u': image.select('u_component_of_wind_10m'),
                                          'v': image.select('v_component_of_wind_10m')
                                        }) .rename('wind_speed_10m');
                                        
      var image = image.addBands(wsExpression)
      
      var wcExpression = image.expression('13.12 + \
                                           0.6215 * (Ta-273.15)  - \
                                           11.37 * pow(WS, 0.16) + \
                                           0.3965 * (Ta-273.15) * pow(WS, 0.16)',
                                           {
                                             'Ta': image.select('temperature_2m'),
                                             'WS': image.select('wind_speed_10m')
                                           }).rename('wind_chill_index')
                                           
      var image = image.addBands(wcExpression)
      
        return image;
    
    })
    
  return wtImages;
};


//////////////////////////////////////////////////////
///////// Task A: daily values ///////////
//////////////////////////////////////////////////////


//  --------- returns  daily peak air/skin temperature -----------/
exports.getDailyPeak = function(startdate, enddate, icHourly){
  
  // number of days during the study period --> length of the list to store daily mean
  var days = enddate.difference(startdate, 'days'); //print('number of days',days2000);

  var daily = ee.ImageCollection(
  // create a empty list, and fill it with daily mean images
  ee.List.sequence(0, days.subtract(1)).map(function(dayOffset){
    
      // iterate the images by date (24 images a day --> avg)
      var start = startdate.advance(dayOffset, 'days')
      var end = start.advance(1, 'days')
      var eachDay = icHourly.filterDate(start, end)
                           //.filter(ee.Filter.notNull(eachDay.select('temperature_2m')))

      return eachDay.reduce(ee.Reducer.max())//.subtract(273.15)
      .set({'system:time_start': eachDay.first().get('system:time_start')//,
            //'temp_c': eachDay.mean().select('temperature_2m').subtract(273.15)
            })
      })
  )
  
  return daily
};


//  --------- returns  daily mean air/skin temperature -----------/
exports.getDailyMean = function(startdate, enddate, icHourly){
  
  // number of days during the study period --> length of the list to store daily mean
  var days = enddate.difference(startdate, 'days'); print('number of days',days);

  var daily = ee.ImageCollection(
  // create a empty list, and fill it with daily mean images
  ee.List.sequence(0, days.subtract(1)).map(function(dayOffset){
    
      // iterate the images by date (24 images a day --> avg)
      var start = startdate.advance(dayOffset, 'days')
      var end = start.advance(1, 'days')
      var eachDay = icHourly.filterDate(start, end)
                           //.filter(ee.Filter.notNull(eachDay.select('temperature_2m')))

      return eachDay.reduce(ee.Reducer.mean())//.subtract(273.15)
      .set({'system:time_start': eachDay.first().get('system:time_start')//,
            //'temp_c': eachDay.mean().select('temperature_2m').subtract(273.15)
            })
      })
  )
  
  return daily
};




//  --------- returns  daily min air/skin temperature -----------/
exports.getDailyMin = function(startdate, enddate, icHourly){
  
  // number of days during the study period --> length of the list to store daily mean
  var days = enddate.difference(startdate, 'days'); //print('number of days',days2000);

  var daily = ee.ImageCollection(
  // create a empty list, and fill it with daily mean images
  ee.List.sequence(0, days.subtract(1)).map(function(dayOffset){
    
      // iterate the images by date (24 images a day --> avg)
      var start = startdate.advance(dayOffset, 'days')
      var end = start.advance(1, 'days')
      var eachDay = icHourly.filterDate(start, end)
                           //.filter(ee.Filter.notNull(eachDay.select('temperature_2m')))

      return eachDay.reduce(ee.Reducer.min())//.subtract(273.15)
      .set({'system:time_start': eachDay.first().get('system:time_start')//,
            //'temp_c': eachDay.mean().select('temperature_2m').subtract(273.15)
            })
      })
  )
  
  return daily
};


// ------------------ returns daily wind speed at 10 m (m/s) --------------//
// encapsulate function
exports.getWindSpeed = function(uvDataset){
    
    var uvImage = uvDataset.map(function(image){
      
      var wsExpression = image.expression('sqrt(pow(u, 2) + pow(v, 2))', // equation
                                        
                                        {// variable
                                          'u': image.select('u_component_of_wind_10m'),
                                          'v': image.select('v_component_of_wind_10m')
                                        }) 
        return wsExpression.rename('wind_speed_10m');
    
    })
    
    return uvImage;
};




/////////////////////////////////////////////////////////////////
///////// Task C: extract pixel value at each GPS location //////
/////////////////////////////////////////////////////////////////
//// ** remove NA in GPS.csv before importing to GEE
//// ** spaital scale: 1000m (same as original dataset)

// ------------------ get value client side on gee -----------//
exports.getVal = function(icDaily, gpsYealy, str){
  // ** icDaily: image collection, daily values at each pixel
  // ** gpsYearly: feature collection, GPS data imported from csv (NA excluded
  // ** str : string, the name of target property: xxxTemp_dailyxxx
  
  
  var temp = icDaily.map(function(image){
  
  // apply a mean reducer to the test points, create a feature for each entry
  var data = image.reduceRegions({collection:gpsYealy,
                                  reducer: ee.Reducer.mean(),
                                  scale: 1000,
                                  tileScale: 4
  }).map(function(feat){
    
      return ee.Feature(feat)//.filter(ee.Filter.notNull('mean'))
      .set(
        // add propertry: image timestamp (millis)
        //'time', image.get('system:time_start'), 
        
        // add property: mean value of the geometry
        str, ee.Number(feat.get('mean')),//.subtract(273.15),
        
        // add property: image id
        //'id', image.get('system:index'),
        
        // add property: image date
        'date', ee.Date(image.get('system:time_start')).format('YYYY-MM-dd')
        
        // add properties: longitude and latitude
        //'latitude', feat.geometry().coordinates().get(1), 
        //'longitude', feat.geometry().coordinates().get(0)
        );
      })
  
  return data;
  }).flatten();
  
  return temp
};

// -------------- export as CSV ----------------//
exports.outputCSV = function(collection, strVar, strVarYear){
  // ** collection: the collection to export
  // ** strVar: the variable to export, with NEWID and date, e.g. xxTemp_dailyxx
  // ** strVarYear: strVar, which year: xxTemp_dailyxx_2000
  
  // export featurecollection to a 2-D csv table
  Export.table.toDrive({collection: collection, // the fc to export
                        description: strVarYear,  // readable task name 
                        folder: 'GEE',
                        fileNamePrefix: strVarYear, 
                        selectors: ['NEWID', 'date', strVar],
                        fileFormat: 'CSV'});
}





/////////////sample test ////////////
//var testGPS = ee.FeatureCollection('projects/ee-zoericardozyz/assets/testGPS');
//print(testGPS)
//var testDaily = getDailyMean(startdate, enddate,dataset);
//print(testDaily)
//var testVal = getVal(testDaily, testGPS,'airTemp_dailyMean');
//print(testVal)
//var testOutput = outputCSV(testVal, 'airTemp_dailyMean', 'airTemp_dailyMean_2000')


