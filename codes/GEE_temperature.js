// ---------------------- functions ---------------//
// using functions to retrevie variables
var functions = require('users/xidi/climate_change:functions/functionSet.js')


// transfer K to C 
var KtoC = function(dataset){
  
    var dailyKtoC = dataset.map(function(image){
      
        var airTempKtoC = image.expression('Ta - 273.15', {'Ta': image.select('temperature_2m')})
                               .rename('air_temp')
                               
        var surTempKtoC = image.expression('Ts - 273.15', {'Ts': image.select('skin_temperature')})
                               .rename('sur_temp')
                               
        var image = image.addBands([airTempKtoC, surTempKtoC])
        
        
        return image;
    }) 
  
  return dailyKtoC;
};   


var getVal = function(icDaily, gpsYealy, str){
  // ** icDaily: image collection, daily values at each pixel
  // ** gpsYearly: feature collection, GPS data imported from csv (NA excluded
  // ** str : string, the name of target property: xxxTemp_dailyxxx
  
  
  var temp = icDaily.map(function(image){
  
  // apply a mean reducer to the test points, create a feature for each entry
  var data = image.reduceRegions({collection:gpsYealy,
                                  reducer: ee.Reducer.mean(),
                                  scale: 1000,
                                  tileScale: 4
                                  })
  return data  
  }).flatten();
  
  return temp
};





// export output
var tempOutputCSV = function(collection, strDescription, airtempStr, surtempStr, 
                            rhStr, hiStr, wsStr, WcStr){
  // ** collection: the collection to export
  // ** strVar: the variable to export, with NEWID and date, e.g. xxTemp_dailyxx
  // ** strVarYear: strVar, which year: xxTemp_dailyxx_2000
  
  // export featurecollection to a 2-D csv table
  Export.table.toDrive({collection: collection, // the fc to export
                        description:strDescription,  // readable task name 
                        folder: 'GEE',
                        fileNamePrefix: strDescription, 
                        selectors: ['NEWID', 'date', airtempStr, surtempStr, 
                                    rhStr, hiStr, wsStr, WcStr],
                        fileFormat: 'CSV'});
}




// -------------------------------------- 2008 entry --------------------------------//
// set study duration
var startdate = ee.Date.fromYMD(2003, 1, 1)
var enddate = ee.Date.fromYMD(2022, 7, 31)

// get hourly dataset
var dataset = ee.ImageCollection("ECMWF/ERA5_LAND/HOURLY").filterDate(startdate, enddate)
                        .select(['u_component_of_wind_10m', 'v_component_of_wind_10m',
                                 'temperature_2m',
                                 'dewpoint_temperature_2m',
                                 'skin_temperature'])
                                 
// hourly relative humidity and heat index
var dataset = functions.getHiHourly(dataset)
print('test',dataset.first())
// hourly wind speed and wind chill factor
var dataset = functions.getWindChillHourly(dataset)
print('test2',dataset.first())
// hourly air and skin temp k to c
var dataset = KtoC(dataset)                               
print('test3',dataset.first())

// daily values
var dailyMax = functions.getDailyPeak(startdate, enddate, dataset)
var dailyMean = functions.getDailyMean(startdate, enddate, dataset)
var dailyMin = functions.getDailyMin(startdate, enddate, dataset)
print('test4',dailyMax.first())

// match GPS locations
var GPS2008 = ee.FeatureCollection('projects/ee-xidi/assets/gps2008_num');

var dailyMaxGPS = functions.getVal(dailyMax, GPS2008, 'daily_max')
//print('test5',dailyMaxGPS.first())
var dailyMeanGPS = functions.getVal(dailyMean, GPS2008, 'daily_mean')
var dailyMinGPS = functions.getVal(dailyMin, GPS2008, 'daily_min')


// export
tempOutputCSV(dailyMaxGPS, 'temps_2008_max',
              'air_temp_max', 'sur_temp_max', 'heat_index_max', 'wind_chill_index_max',
              'relative_humidity_max', 'wind_speed_10m_max')
              
tempOutputCSV(dailyMeanGPS, 'temps_2008_mean',
              'air_temp_mean', 'sur_temp_mean', 'heat_index_mean', 'wind_chill_index_mean',
              'relative_humidity_mean', 'wind_speed_10m_mean')

tempOutputCSV(dailyMinGPS, 'temps_2008_min',
              'air_temp_min', 'sur_temp_min', 'heat_index_min', 'wind_chill_index_min',
              'relative_humidity_min', 'wind_speed_10m_min')










